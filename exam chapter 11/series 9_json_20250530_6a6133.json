{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='direction: rtl; text-align: right; font-family: B Nazanin;'>\n",
    "<h1>سری ۹: تحلیل پایداری پیشرفته و طراحی کنترل‌کننده</h1>\n",
    "<h3>دانشگاه: [نام دانشگاه]</h3>\n",
    "<h3>نام دانشجو: [نام شما]</h3>\n",
    "<h3>استاد: [نام استاد]</h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='direction: rtl; text-align: right; font-family: B Nazanin;'>\n",
    "<h2>۱. اثبات پایداری مطلق با تئوری لیاپانوف</h2>\n",
    "<p>سیستم غیرخطی:</p>\n",
    "\\[\n",
    "\\begin{cases}\n",
    "\\dot{x}_1 = -x_1 + x_2 \\\\\n",
    "\\dot{x}_2 = -x_1^3 - x_2\n",
    "\\end{cases}\n",
    "\\]\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sympy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import solve_ivp\n",
    "\n",
    "# تعریف نمادین\n",
    "x1, x2 = sp.symbols('x1 x2')\n",
    "\n",
    "# تابع لیاپانوف\n",
    "V = 0.5*x1**2 + 0.25*x1**4 + 0.5*x2**2\n",
    "\n",
    "# محاسبه مشتق\n",
    "V_dot = sp.diff(V, x1)*(-x1 + x2) + sp.diff(V, x2)*(-x1**3 - x2)\n",
    "print(\"\\nمشتق تابع لیاپانوف:\")\n",
    "display(sp.simplify(V_dot))\n",
    "\n",
    "# شبیه‌سازی عددی\n",
    "def system(t, x):\n",
    "    return [-x[0] + x[1], -x[0]**3 - x[1]]\n",
    "\n",
    "sol = solve_ivp(system, [0, 10], [1.0, 0.5], dense_output=True)\n",
    "t = np.linspace(0, 10, 300)\n",
    "x = sol.sol(t)\n",
    "\n",
    "# رسم نمودار\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.plot(t, x.T)\n",
    "plt.xlabel('زمان', fontname='B Nazanin')\n",
    "plt.ylabel('مقدار حالت‌ها', fontname='B Nazanin')\n",
    "plt.title('پاسخ سیستم غیرخطی', fontname='B Nazanin', fontsize=14)\n",
    "plt.legend(['$x_1$', '$x_2$'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='direction: rtl; text-align: right; font-family: B Nazanin;'>\n",
    "<h2>۲. محاسبه پاسخ فرکانسی سیستم غیرمینیمم فاز</h2>\n",
    "<p>تابع انتقال:</p>\n",
    "\\[\n",
    "G(s) = \\frac{s-1}{(s+2)(s+3)}\n",
    "\\]\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import control as ct\n",
    "\n",
    "# تعریف تابع انتقال\n",
    "num = [1, -1]\n",
    "den = np.polymul([1, 2], [1, 3])\n",
    "G = ct.tf(num, den)\n",
    "\n",
    "# محاسبه پاسخ فرکانسی\n",
    "omega = 2\n",
    "mag, phase, _ = ct.freqresp(G, omega)\n",
    "\n",
    "print(f\"مقدار دامنه در ω={omega} rad/s: {abs(mag):.4f}\")\n",
    "print(f\"مقدار فاز: {np.angle(mag, deg=True):.2f}°\")\n",
    "\n",
    "# نمودار بود\n",
    "plt.figure(figsize=(10, 4))\n",
    "ct.bode_plot(G, dB=True, Hz=False)\n",
    "plt.suptitle('نمودار بودی سیستم', fontname='B Nazanin')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='direction: rtl; text-align: right; font-family: B Nazanin;'>\n",
    "<h2>۳. محاسبه محدوده بهره برای پایداری</h2>\n",
    "<p>سیستم با تابع انتقال:</p>\n",
    "\\[\n",
    "G(s) = \\frac{K(s+1)}{s(s-1)(s+6)}\n",
    "\\]\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# محاسبه آرایه راث\n",
    "def routh_hurwitz(K):\n",
    "    # معادله مشخصه: s^3 + 5s^2 + (K-6)s + K = 0\n",
    "    arr = np.array([\n",
    "        [1, K-6],\n",
    "        [5, K],\n",
    "        [(4*K-30)/5, 0],\n",
    "        [K, 0]\n",
    "    ])\n",
    "    return arr\n",
    "\n",
    "# پیدا کردن محدوده K\n",
    "K_min = 7.5\n",
    "print(f\"حداقل بهره برای پایداری: K > {K_min}\")\n",
    "\n",
    "# نمایش آرایه برای K=8\n",
    "print(\"\\nآرایه راث برای K=8:\")\n",
    "print(routh_hurwitz(8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='direction: rtl; text-align: right; font-family: B Nazanin;'>\n",
    "<h2>۴. بررسی مشاهده‌پذیری سیستم غیرخطی</h2>\n",
    "<p>سیستم:</p>\n",
    "\\[\n",
    "\\begin{cases}\n",
    "\\dot{x}_1 = -x_2 \\\\\n",
    "\\dot{x}_2 = x_1^3 \\\\\n",
    "y = x_1 + x_2\n",
    "\\end{cases}\n",
    "\\]\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ماتریس مشاهده‌پذیری\n",
    "def observability_matrix(x1, x2):\n",
    "    return np.array([\n",
    "        [1, 1],\n",
    "        [-x2, x1**3]\n",
    "    ])\n",
    "\n",
    "# بررسی برای نقاط مختلف\n",
    "points = [(1, 0.5), (0.1, -0.2), (2, 1)]\n",
    "for x1, x2 in points:\n",
    "    Ob = observability_matrix(x1, x2)\n",
    "    print(f\"\\nنقطه ({x1}, {x2}):\")\n",
    "    print(f\"رتبه ماتریس: {np.linalg.matrix_rank(Ob)}\")\n",
    "    print(f\"دترمینان: {np.linalg.det(Ob):.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='direction: rtl; text-align: right; font-family: B Nazanin;'>\n",
    "<h2>۵. طراحی کنترل‌کننده تطبیقی</h2>\n",
    "<p>سیستم:</p>\n",
    "\\[\n",
    "\\dot{x} = -x + u\n",
    "\\]\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# پارامترهای شبیه‌سازی\n",
    "a_real = 1.2  # مقدار واقعی (نامعلوم)\n",
    "gamma = 0.5   # نرخ تطبیق\n",
    "k = 2.0       # بهره کنترل\n",
    "\n",
    "# شبیه‌سازی\n",
    "def adaptive_control(t_range):\n",
    "    x = [0.8]  # شرایط اولیه\n",
    "    a_hat = [0.0]  # تخمین اولیه\n",
    "    \n",
    "    dt = t_range[1] - t_range[0]\n",
    "    \n",
    "    for t in t_range[1:]:\n",
    "        # قانون کنترل\n",
    "        u = a_hat[-1]*x[-1] - k*x[-1]\n",
    "        \n",
    "        # به‌روزرسانی حالت سیستم\n",
    "        x_new = x[-1] + (-a_real*x[-1] + u)*dt\n",
    "        \n",
    "        # قانون تطبیق\n",
    "        a_hat_new = a_hat[-1] - gamma*x[-1]**2*dt\n",
    "        \n",
    "        x.append(x_new)\n",
    "        a_hat.append(a_hat_new)\n",
    "    \n",
    "    return x, a_hat\n",
    "\n",
    "# اجرای شبیه‌سازی\n",
    "t = np.linspace(0, 10, 500)\n",
    "x, a_hat = adaptive_control(t)\n",
    "\n",
    "# رسم نتایج\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(t, x)\n",
    "plt.title('پاسخ حالت سیستم', fontname='B Nazanin')\n",
    "plt.xlabel('زمان', fontname='B Nazanin')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(t, a_hat, 'r')\n",
    "plt.axhline(y=a_real, color='k', linestyle='--')\n",
    "plt.title('تخمین پارامتر تطبیقی', fontname='B Nazanin')\n",
    "plt.xlabel('زمان', fontname='B Nazanin')\n",
    "plt.legend(['تخمین', 'مقدار واقعی'], prop={'family': 'B Nazanin'})\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 }
}