Stu: Amir Hossein Maddahi
Stu NO: 403137004
Date of Approval: 25/01/1404
Article Title: TORCHFX: A MODERN APPROACH TO AUDIO DSP WITH PYTORCH AND GPU ACCELERATION
Project scope: Writing the code for the block diagaram provided in the document and rebuilding it 
----------------------------------------------------------------------------------------------------------
Summary:
TORCHFX is a toolset implemented in order to facilitate and ease audio processing.
The overall algorythm is to embed the audio file into a wave and proceed with changes.
Among the features of TORCHFX, the application of modules and pipelines stand out as the key features.
----------------------------------------------------------------------------------------------------------
Project Contents:
1 - Filters
  1 - 1 - Base
  1 - 2 - Init
  1 - 3 - Fir
  1 - 4 - Iir
  1 - 5 - Utility
2 - Main Body
  2 - 1 - Init
  2 - 2 - Effects
  2 - 3 - Typing
  2 - 4 - Wave
----------------------------------------------------------------------------------------------------------
1 - Filters:
----------------------------------------------------------------------------------------------------------
1 - 1 - Base:
----------------------------------------------------------------------------------------------------------
import abc

from torchfx.effects import FX


class AbstractFilter(FX, abc.ABC):
    """Base class for filters.
    This class provides the basic structure for implementing filters. It inherits from
    `FX`. It provides the method `compute_coefficients` to compute the filter coefficients.
    """

    @property
    def _has_computed_coeff(self) -> bool:
        if hasattr(self, "b") and hasattr(self, "a"):
            return self.b is not None and self.a is not None
        if hasattr(self, "b"):
            return self.b is not None
        return True

    @abc.abstractmethod
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

    @abc.abstractmethod
    def compute_coefficients(self) -> None:
        """Compute the filter coefficients."""
        pass
----------------------------------------------------------------------------------------------------------
1 - 2 - Init:
----------------------------------------------------------------------------------------------------------
from .fir import FIR, DesignableFIR
from .iir import (
    IIR,
    HiButterworth,
    LoButterworth,
    HiChebyshev1,
    LoChebyshev1,
    HiChebyshev2,
    LoChebyshev2,
    HiShelving,
    LoShelving,
    Notch,
    AllPass,
    Chebyshev1,
    Chebyshev2,
    Butterworth,
)

__all__ = [
    "Butterworth",
    "Chebyshev1",
    "Chebyshev2",
    "FIR",
    "DesignableFIR",
    "IIR",
    "HiButterworth",
    "LoButterworth",
    "HiChebyshev1",
    "LoChebyshev1",
    "HiChebyshev2",
    "LoChebyshev2",
    "HiShelving",
    "LoShelving",
    "Notch",
    "AllPass",
]
----------------------------------------------------------------------------------------------------------
1 - 3 - Fir:
----------------------------------------------------------------------------------------------------------
"""Fir filters."""

from typing import Sequence
from numpy.typing import ArrayLike
from torch import Tensor, nn
import torch
from typing_extensions import override
from scipy.signal import firwin

from torchfx.filter.__base import AbstractFilter
from torchfx.typing import WindowType


class FIR(AbstractFilter):
    """Efficient FIR filter using conv1d. Supports [T], [C, T], [B, C, T]."""

    def __init__(self, b: ArrayLike) -> None:
        super().__init__()
        # Flip the kernel for causal convolution (like lfilter)
        b_tensor = torch.tensor(b, dtype=torch.float32).flip(0)
        self.register_buffer("kernel", b_tensor[None, None, :])  # [1, 1, K]

    @override
    def compute_coefficients(self) -> None:
        """Compute the filter coefficients."""
        # This method is not used in FIR, but defined for consistency with IIR
        pass

    @override
    def forward(self, x: Tensor) -> Tensor:
        dtype = x.dtype
        device = x.device
        kernel = self.kernel.to(dtype=dtype, device=device)

        original_shape = x.shape

        # Reshape input to [B, C, T]
        if x.ndim == 1:
            # [T] → [1, 1, T]
            x = x.unsqueeze(0).unsqueeze(0)
        elif x.ndim == 2:
            # [C, T] → [1, C, T]
            x = x.unsqueeze(0)
        elif x.ndim == 3:
            # [B, C, T] → as is
            pass
        else:
            raise ValueError("Input must be of shape [T], [C, T], or [B, C, T]")

        BATCHES, CHANNELS, TIME = x.shape

        # Expand kernel to match number of channels
        kernel_exp = kernel.expand(CHANNELS, 1, -1)  # [C, 1, K] # type: ignore

        # Pad input to maintain original length, pad right side
        pad = kernel.shape[-1] - 1  # type: ignore
        x_padded = nn.functional.pad(x, (pad, 0))  # pad right only # type: ignore

        # Apply convolution with groups = C (same kernel per channel, repeated for batch)
        y = nn.functional.conv1d(
            x_padded, kernel_exp.repeat(BATCHES, 1, 1), groups=CHANNELS
        )

        # Reshape back to [B, C, T]
        y = y.view(BATCHES, CHANNELS, TIME)

        # Reduce to original shape if input wasn't batched
        if len(original_shape) == 1:
            return y[0, 0]
        elif len(original_shape) == 2:
            return y[0]
        else:
            return y


class DesignableFIR(FIR):
    """
    FIR filter designed using scipy.signal.firwin.

    Attributes
    ----------
    cutoff : float | Sequence[float]
        Cutoff frequency or frequencies (in Hz) for the filter.
    num_taps : int
        Number of taps (filter order) for the FIR filter.
    fs : int | None
        Sampling frequency (in Hz) of the input signal. If None, the filter will not
        be designed.
    pass_zero : bool
        If True, the filter will be a lowpass filter. If False, it will be a highpass
        filter.
    window : WindowType
        Window type to use for the FIR filter design. Default is "hamming".

    """

    def __init__(
        self,
        cutoff: float | Sequence[float],
        num_taps: int,
        fs: int | None = None,
        pass_zero: bool = True,
        window: WindowType = "hamming",
    ) -> None:
        # Design the filter using firwin
        self.num_taps = num_taps
        self.cutoff = cutoff
        self.fs = fs
        self.pass_zero = pass_zero
        self.window = window

        self.b: ArrayLike | None = None
        if fs is not None:
            self.compute_coefficients()
            assert self.b is not None, "Filter coefficients (b) must be computed."
            super().__init__(self.b)

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None, "Sampling frequency (fs) must be set."

        self.b = firwin(
            self.num_taps,
            self.cutoff,
            fs=self.fs,
            pass_zero=self.pass_zero,
            window=self.window,
            scale=True,
        )
        assert self.b is not None, "Filter coefficients (b) must be computed."

        super().__init__(self.b)
----------------------------------------------------------------------------------------------------------
1 - 4 - Iir:
----------------------------------------------------------------------------------------------------------
"""Module of IIR filters."""

import abc
from typing import Sequence

import numpy as np
import torch
from scipy.signal import butter, iirpeak, iirnotch, cheby1, cheby2
from torch import Tensor
from torchaudio import functional as F  # noqa: N812
from typing_extensions import override

from torchfx.filter.__base import AbstractFilter
from torchfx.typing import FilterOrderScale

NONE_FS_ERR = "Sample rate of the filter could not be None."


class IIR(AbstractFilter):
    """IIR filter.
    This class implements the IIR filter interface. It is an abstract class that
    provides the basic structure for implementing IIR filters. It inherits from
    `AbstractFilter` and provides the basic structure for implementing IIR filters.

    Attributes
    ----------
    a : Sequence
        The filter's numerator coefficients.
    b : Sequence
        The filter's denominator coefficients.
    fs : int | None
        The sampling frequency of the filter.
    cutoff : float
        The cutoff frequency of the filter.
    """

    fs: int | None
    cutoff: float

    @abc.abstractmethod
    def __init__(self, fs: int | None = None) -> None:
        super().__init__()
        self.fs = fs

    def move_coeff(self, device, dtype=torch.float32):
        """Move the filter coefficients to the specified device and dtype."""
        self.a = torch.as_tensor(self.a, device=device, dtype=dtype)
        self.b = torch.as_tensor(self.a, device=device, dtype=dtype)

    @override
    def forward(self, x: Tensor) -> Tensor:
        dtype = x.dtype
        device = x.device
        if self.fs is None:
            raise ValueError(NONE_FS_ERR)

        if self.a is None or self.b is None:
            self.compute_coefficients()

        if not isinstance(self.a, Tensor) or not isinstance(self.b, Tensor):
            self.move_coeff(device, dtype)

        return F.lfilter(x, self.a, self.b)


class Butterworth(IIR):
    """Butterworth filter."""

    def __init__(
        self,
        btype: str,
        cutoff: float,
        order: int = 4,
        order_scale: FilterOrderScale = "linear",
        fs: int | None = None,
        a: Sequence | None = None,
        b: Sequence | None = None,
    ) -> None:
        super().__init__(fs)
        self.btype = btype
        self.cutoff = cutoff
        self.order = order if order_scale == "linear" else order // 6
        self.a = a
        self.b = b

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None

        b, a = butter(self.order, self.cutoff / (0.5 * self.fs), btype=self.btype)  # type: ignore
        self.b = b
        self.a = a


class Chebyshev1(IIR):
    """Chebyshev type 1 filter."""

    def __init__(
        self,
        btype: str,
        cutoff: float,
        order: int = 4,
        ripple: float = 0.1,
        fs: int | None = None,
        a: Sequence | None = None,
        b: Sequence | None = None,
    ) -> None:
        super().__init__(fs)
        self.btype = btype
        self.cutoff = cutoff
        self.order = order
        self.ripple = ripple
        self.a = a
        self.b = b

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None

        b, a = cheby1(  # type: ignore
            self.order,
            self.ripple,
            self.cutoff / (0.5 * self.fs),
            btype=self.btype,
        )
        self.b = b
        self.a = a


class Chebyshev2(IIR):
    """Chebyshev type 2 filter."""

    def __init__(
        self,
        btype: str,
        cutoff: float,
        order: int = 4,
        ripple: float = 0.1,
        fs: int | None = None,
    ) -> None:
        super().__init__(fs)
        self.btype = btype
        self.cutoff = cutoff
        self.order = order
        self.ripple = ripple

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None

        b, a = cheby2(  # type: ignore
            self.order,
            self.ripple,
            self.cutoff / (0.5 * self.fs),
            btype=self.btype,
        )
        self.b = b
        self.a = a


class HiChebyshev1(Chebyshev1):
    """High-pass Chebyshev type 1 filter."""

    def __init__(
        self,
        cutoff: float,
        order: int = 4,
        ripple: float = 0.1,
        fs: int | None = None,
    ) -> None:
        super().__init__("highpass", cutoff, order, ripple, fs)


class LoChebyshev1(Chebyshev1):
    """Low-pass Chebyshev type 1 filter."""

    def __init__(
        self,
        cutoff: float,
        order: int = 4,
        ripple: float = 0.1,
        fs: int | None = None,
    ) -> None:
        super().__init__("lowpass", cutoff, order, ripple, fs)


class HiChebyshev2(Chebyshev2):
    """High-pass Chebyshev type 2 filter."""

    def __init__(
        self,
        cutoff: float,
        order: int = 4,
        ripple: float = 0.1,
        fs: int | None = None,
    ) -> None:
        super().__init__("highpass", cutoff, order, ripple, fs)


class LoChebyshev2(Chebyshev2):
    """Low-pass Chebyshev type 2 filter."""

    def __init__(
        self,
        cutoff: float,
        order: int = 4,
        ripple: float = 0.1,
        fs: int | None = None,
    ) -> None:
        super().__init__("lowpass", cutoff, order, ripple, fs)


class HiButterworth(Butterworth):
    """High-pass filter."""

    def __init__(
        self,
        cutoff: float,
        order: int = 5,
        order_scale: FilterOrderScale = "linear",
        fs: int | None = None,
    ) -> None:
        super().__init__("highpass", cutoff, order, order_scale, fs)


class LoButterworth(Butterworth):
    """Low-pass filter."""

    def __init__(
        self,
        cutoff: float,
        order: int = 5,
        order_scale: FilterOrderScale = "linear",
        fs: int | None = None,
    ) -> None:
        super().__init__("lowpass", cutoff, order, order_scale, fs)


class Shelving(IIR):
    """Shelving filter."""

    q: float

    @property
    def _omega(self) -> float:
        if self.fs is None:
            raise ValueError(NONE_FS_ERR)
        return 2 * np.pi * self.cutoff / self.fs

    @property
    def _alpha(self) -> float:
        return np.sin(self._omega) / (2 * self.q)


class HiShelving(Shelving):
    """High pass shelving filter."""

    gain: float

    def __init__(
        self,
        cutoff: float,
        q: float,
        gain: float,
        gain_scale: FilterOrderScale = "linear",
        fs: int | None = None,
    ):
        super().__init__(fs)
        self.cutoff = cutoff
        self.q = q
        self.gain = gain if gain_scale == "linear" else 10 ** (gain / 20)

    @override
    def compute_coefficients(self) -> None:
        A = self.gain  # noqa: N806
        b0 = A * (
            (A + 1) + (A - 1) * np.cos(self._omega) + 2 * np.sqrt(A) * self._alpha
        )
        b1 = -2 * A * ((A - 1) + (A + 1) * np.cos(self._omega))
        b2 = A * (
            (A + 1) + (A - 1) * np.cos(self._omega) + 2 * np.sqrt(A) * self._alpha
        )

        a0 = (A + 1) - (A - 1) * np.cos(self._omega) + 2 * np.sqrt(A) * self._alpha
        a1 = 2 * ((A - 1) - (A + 1) * np.cos(self._omega))
        a2 = (A + 1) - (A - 1) * np.cos(self._omega) - 2 * np.sqrt(A) * self._alpha

        b = [b0 / a0, b1 / a0, b2 / a0]
        a = [1.0, a1 / a0, a2 / a0]

        self.b = b
        self.a = a


class LoShelving(Shelving):
    """Low pass shelving filter.

    .. todo:::
        Implement the low shelving filter.
        The current implementation is a placeholder and does not perform any filtering.

    """

    ...


class Peaking(IIR):
    """Peaking filter."""

    def __init__(
        self,
        cutoff: float,
        Q: float,
        gain: float,
        gain_scale: FilterOrderScale,
        fs: int | None = None,
    ) -> None:
        super().__init__(fs)
        self.cutoff = cutoff
        self.Q = Q
        self.gain = gain if gain_scale == "linear" else 10 ** (gain / 20)

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None

        b, a = iirpeak(self.cutoff / (self.fs / 2), self.Q, self.fs)
        self.b = b
        self.a = a


class Notch(IIR):
    """Notch filter."""

    def __init__(
        self,
        cutoff: float,
        Q: float,
        fs: int | None = None,
    ) -> None:
        super().__init__(fs)
        self.cutoff = cutoff
        self.Q = Q

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None

        b, a = iirnotch(self.cutoff / (self.fs / 2), self.Q)
        self.b = b
        self.a = a


class AllPass(IIR):
    """All pass filter."""

    def __init__(
        self,
        cutoff: float,
        Q: float,
        fs: int | None = None,
    ) -> None:
        super().__init__(fs)
        self.cutoff = cutoff
        self.Q = Q

    @override
    def compute_coefficients(self) -> None:
        assert self.fs is not None

        b, a = iirpeak(self.cutoff / (self.fs / 2), self.Q)
        self.b = b
        self.a = a
----------------------------------------------------------------------------------------------------------
1 - 5 - Utility:
----------------------------------------------------------------------------------------------------------
"""Utility functions for filter design."""

from torchfx.typing import FilterOrderScale


def compute_order(o: int, scale: FilterOrderScale) -> int:
    """Compute the correct filter's order given a specified scale.

    The filter order is usually specified as an abstract number,
    but it occurs also as db quantity, therefore this function
    is used to prepare the given order to be inputted to a filter
    class.

    Parameters
    ----------
    o : int
        The input order referred to the input scale
    scale : FilterOrderScale
        The input scale used to quantify the order

    Returns
    -------
    int
        The correct order value in linear scale

    Example
    -------
    >>> o = 24 # db
    >>> compute_order(o, "db")
    4
    """
    match scale:
        case "db":
            return o // 6
        case "linear":
            return o
----------------------------------------------------------------------------------------------------------
2 - Main Body:
----------------------------------------------------------------------------------------------------------
2 - 1 - Init:
----------------------------------------------------------------------------------------------------------
import torchfx.filter as filter
import torchfx.typing as typing
from torchfx.effects import FX
from torchfx.wave import Wave

__all__ = ["FX", "Wave", "filter", "typing"]
----------------------------------------------------------------------------------------------------------
2 - 2 - Effects:
----------------------------------------------------------------------------------------------------------
import abc
from torch import nn, Tensor
from typing_extensions import override


class FX(nn.Module, abc.ABC):
    """Abstract base class for all effects.
    This class defines the interface for all effects in the library. It inherits from
    `torch.nn.Module` and provides the basic structure for implementing effects.
    """
    @abc.abstractmethod
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

    @override
    @abc.abstractmethod
    def forward(self, x: Tensor) -> Tensor: ...
----------------------------------------------------------------------------------------------------------
2 - 3 - Typing:
----------------------------------------------------------------------------------------------------------
import typing as tp

from annotated_types import Ge, Le
import torch

Decibel = tp.Annotated[float, Le(0)]
Millisecond = tp.Annotated[int, Ge(0)]
Second = tp.Annotated[float, Ge(0)]
BitRate = tp.Literal[16, 24, 32]

#: Type of spectrogram to compute.
#: It can be either "mel", "linear", or "log".
SpecScale = tp.Literal["mel", "lin", "log"]

#: Type of filter to apply.
#: It can be either a string ("low" or "high") or a tuple of two floats.
FilterType = tp.Literal["low", "high"]

#: Type of filter order.
#: It can be either a string ("linear" or "db") or an integer.
FilterOrderScale = tp.Literal["db", "linear"]

#: Type of device to use for computation.
#: It can be either a string ("cpu" or "cuda") or a torch.device object.
# The string "cuda" will use the first available CUDA device.
Device = tp.Literal["cpu", "cuda"] | torch.device

#: Type of window functions.
#: See `scipy.signal.get_window` for more information.
WindowType = tp.Literal[
    "hann",
    "hamming",
    "blackman",
    "kaiser",
    "boxcar",
    "bartlett",
    "flattop",
    "parzen",
    "bohman",
    "nuttall",
    "barthann",
]
----------------------------------------------------------------------------------------------------------
2 - 4 - Wave:
----------------------------------------------------------------------------------------------------------
import typing as tp
from collections.abc import Callable
from pathlib import Path

import torchaudio
from numpy.typing import ArrayLike
from torch import Tensor, nn
from typing_extensions import Self

from torchfx.effects import FX
from torchfx.filter.__base import AbstractFilter
from torchfx.typing import Device


class Wave:
    ys: Tensor
    fs: int
    __device: Device  # private field
    def __init__(self, ys: ArrayLike, fs: int, device: Device = "cpu") -> None:
        self.fs = fs
        self.ys = Tensor(ys)
        self.to(device)
    @property
    def device(self) -> Device:
        return self.__device
    @device.setter
    def device(self, device: Device) -> None:
        self.to(device)
    def to(self, device: Device) -> Self:
        self.__device = device
        self.ys = self.ys.to(device)
        return self
    def transform(self, func: Callable[..., Tensor], *args, **kwargs) -> "Wave":
        return Wave(func(self.ys, *args, **kwargs), self.fs)
    @classmethod
    def from_file(cls, path: str | Path, *args, **kwargs) -> "Wave":
        data, fs = torchaudio.load(path, *args, **kwargs)
        return cls(data, fs)
    def __or__(self, f: nn.Module) -> "Wave":
        if not isinstance(f, nn.Module):
            raise TypeError(f"Expected nn.Module, but got {type(f).__name__} instead.")
        if isinstance(f, FX):
            if hasattr(f, "fs") and f.fs is None:
                f.fs = self.fs  # type: ignore
            if isinstance(f, AbstractFilter) and not f._has_computed_coeff:
                f.compute_coefficients()
        if isinstance(f, nn.Sequential) or isinstance(f, nn.ModuleList):
            for a in f:
                if isinstance(a, FX):
                    if hasattr(a, "fs") and a.fs is None:
                        a.fs = self.fs  # type: ignore
                    if isinstance(a, AbstractFilter) and not a._has_computed_coeff:
                        a.compute_coefficients()
        return self.transform(f.forward)
    def __len__(self) -> int:
        return self.ys.shape[1]
    def channels(self) -> int:
        return self.ys.shape[0]
    def get_channel(self, index: int) -> "Wave":
        return Wave(self.ys[index], self.fs)
    def duration(self, unit: tp.Literal["sec", "ms"]) -> float:
        return len(self) / self.fs * (1000 if unit == "ms" else 1)
----------------------------------------------------------------------------------------------------------
